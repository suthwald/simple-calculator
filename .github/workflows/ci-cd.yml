name: CI + Release + Publish

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write   # needed to push tags & releases
  packages: write
  id-token: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - run: python -m pip install --upgrade pip poetry
      - run: poetry install --no-interaction --no-ansi
      - run: poetry run ruff check .
      - run: poetry run ruff format --check .

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - run: python -m pip install --upgrade pip poetry
      - run: poetry install --no-interaction --no-ansi
      - run: poetry run pytest -q

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - run: python -m pip install --upgrade pip poetry
      - run: poetry install --no-interaction --no-ansi
      - run: poetry build

  release:
    name: Tag & Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | cut -d '"' -f2)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        run: |
          if git rev-parse ${{ steps.version.outputs.version }} >/dev/null 2>&1; then
            echo "‚ùå Tag ${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - run: python -m pip install --upgrade pip poetry twine
      - run: poetry install --no-interaction --no-ansi
      - run: poetry build
      - run: twine check dist/*
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
