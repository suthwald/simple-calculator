name: CI / Build / Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  lint:
    name: Ruff lint & format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: python -m pip install --upgrade pip poetry

      - name: Install dev dependencies
        run: |
          poetry config virtualenvs.create false --local || true
          poetry install --no-interaction --no-ansi

      - name: Ruff check
        run: poetry run ruff check .

      - name: Ruff format check
        run: poetry run ruff format --check .

  test:
    name: Run tests (Python 3.12)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-cache-${{ runner.os }}-3.12-${{ hashFiles('**/poetry.lock','**/pyproject.toml') }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-3.12-

      - name: Install Poetry
        run: python -m pip install --upgrade pip poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false --local || true
          poetry install --no-interaction --no-ansi

      - name: Run tests
        run: poetry run pytest -q

  build:
    name: Build distributions (Python 3.12)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: python -m pip install --upgrade pip poetry

      - name: Install build deps
        run: |
          poetry config virtualenvs.create false --local || true
          poetry install --no-interaction --no-ansi

      - name: Build (poetry)
        run: poetry build

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install twine
        run: python -m pip install --upgrade pip twine

      - name: Check distributions
        run: twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
